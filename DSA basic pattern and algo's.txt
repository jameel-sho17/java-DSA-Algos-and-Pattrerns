## ‚úÖ **What is an Algorithm?**

An **algorithm** is a **step-by-step procedure** for solving a specific problem.

### üîπ Examples of Algorithms:

| Category | Algorithm Name | Purpose |
| --- | --- | --- |
| **Sorting** | Bubble Sort, Merge Sort, Quick Sort, Insertion Sort | Arrange data in order |
| **Searching** | Binary Search, Linear Search | Find element in array or list |
| **Graph** | Dijkstra‚Äôs, BFS, DFS, Kruskal‚Äôs, Prim‚Äôs | Pathfinding, traversal, MST, etc. ||
| **Dynamic Programming** | Knapsack, Longest Subsequence, Matrix Chain Multiplication | Optimize overlapping problems |
| **Greedy** | Activity Selection, Huffman Encoding | Make optimal local choices |
| **Math** | Euclidean Algorithm, Sieve of Eratosthenes | GCD, primes, number theory problems |
| **Backtracking** | N-Queens, Sudoku Solver | Explore all possibilities recursively |
| **Divide and Conquer** | Merge Sort, Quick Sort, Binary Search | Break into subproblems |
| **Recursion** | Factorial, Fibonacci | Solve using self-calling functions |

---

## ‚úÖ **What is a Pattern?**

A **pattern** is a **general reusable strategy or technique** for solving classes of problems. It's not specific like an algorithm, but more like a **problem-solving template**.

### üîπ Common Coding Problem-Solving Patterns:

| Pattern Name | Description & Use Case Example |
| --- | --- |
| **Two Pointers** | Use two indexes to scan array from ends or middle. Example: Pair sum, reverse array |
| **Sliding Window** | Solve subarray problems with a window that moves. Example: Max sum of k-length subarray |
| **Fast & Slow Pointers (Tortoise-Hare)** | Detect cycles in linked list or find middle |
| **Binary Search Pattern** | Efficiently search sorted array or search space |
| **Greedy Pattern** | Always choose the locally best option |
| **Backtracking** | Try all possible options and backtrack. Example: N-Queens, permutations |
| **Divide & Conquer** | Break the problem into parts. Example: Merge sort |
| **Dynamic Programming (DP)** | Solve overlapping subproblems with memoization |
| **Recursion Pattern** | Solve problems by breaking them into smaller problems |
| **Bit Manipulation** | Use bitwise operations for optimization |
| **Hashing/Map Pattern** | Use HashMaps to reduce time complexity |
| **Stack/Queue Pattern** | Use stack for recent items, queue for FIFO logic |
| **Prefix Sum / Difference Array** | Efficient range queries or cumulative data |

---

## üß† Analogy:

- **Algorithm = Specific Recipe** (like "how to make pasta")
- **Pattern = Cooking Technique** (like "boil", "stir-fry", "bake")

---

## üîÅ Summary Table

| Type | Examples | Used for |
| --- | --- | --- |
| **Algorithms** | Merge Sort, Dijkstra, BFS, Knapsack | Solving a problem step-by-step |
| **Patterns** | Two Pointers, Sliding Window, DP | Reusable techniques in problem solving |
